{"ast":null,"code":"var _jsxFileName = \"/Users/ivanmokeyev/Documents/Eng Projects/smokevan.github.io/src/components/Documentation.tsx\";\nimport React from 'react';\nimport '../assets/styles/Documentation.scss';\nimport mock09 from '../assets/images/mock09.png';\nimport mock10 from '../assets/images/mock10.png';\nimport iter_mul from '../assets/images/mock08.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst C2S2 = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"docs-page-wrapper\",\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doc-container docs\",\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      className: \"back-link\",\n      href: \"#/\",\n      children: \"\\u2190 Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"c2s2 \\u2014 Component / System notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This project documents the component-to-system integration. Add your notes and diagrams below.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Design: simple, componentized UI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Data flow: event-driven\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: mock09,\n      alt: \"c2s2 mock\",\n      className: \"diagram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 3\n}, this);\n_c = C2S2;\nconst TRV2Processor = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"docs-page-wrapper\",\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doc-container docs\",\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      className: \"back-link\",\n      href: \"#/\",\n      children: \"\\u2190 Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"TRV2_processor \\u2014 Processing pipeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Overview of the TRV2_processor pipeline and transform steps.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Load input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Normalize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Run processor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: mock10,\n      alt: \"TRV2 mock\",\n      className: \"diagram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Example iteration diagram:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: iter_mul,\n      alt: \"iteration diagram\",\n      className: \"diagram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 27,\n  columnNumber: 3\n}, this);\n_c2 = TRV2Processor;\nconst TinyRiscV2 = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"doc-container docs\",\n  children: [/*#__PURE__*/_jsxDEV(\"a\", {\n    className: \"back-link\",\n    href: \"#/\",\n    children: \"\\u2190 Back\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"TinyRiscV2 Processor\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: mock09,\n    alt: \"TinyRiscV2 hero\",\n    className: \"doc-hero\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"doc-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This is a compact TinyRISCV2 compatible processor implementation, with five forwarded pipeline stages, an iterative multiplication unit, a branch target buffer, and more.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Quick links\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://github.com/smokevan\",\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: \"GitHub\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Design Process\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This processor was in part designed for ECE4750, Computer Architecture, at Cornell University. Using some previously verified IP, such as muxes, registers, a regfile, and a memory interface, I designed the processor from the ground up in SystemVerilog. This processor uses a common 5-stage pipeline, with instruction fetch, decode, execute, memory, and writeback stages. It implements full forwarding and hazard detection to stall when necessary for multiplication, processor management, and memory operations.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Iterative Multiplier\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: iter_mul,\n      alt: \"iterative multiplier diagram\",\n      className: \"diagram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The iterative multiplier uses a common shift-and-add algorithm to perform multiplication over multiple cycles, with a variable latency system to optimize speed by shifting by several indices when many zeroes are present in the multiplier or multiplicand. This is handled through a standard val/rdy streaming interface, allowing for careful handling of multiplication operations in the pipeline using hazard detection and stalling.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 3\n}, this);\n_c3 = TinyRiscV2;\nconst Documentation = ({\n  projectId\n}) => {\n  const hashId = typeof window !== 'undefined' ? (window.location.hash || '').replace(/^#\\/?/, '') : '';\n  const inferred = hashId.startsWith('docs/') ? hashId.split('/')[1] : '';\n  const id = projectId || inferred || 'c2s2';\n  if (!id) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"docs\",\n    children: \"No project selected\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 19\n  }, this);\n  switch (id.toLowerCase()) {\n    case 'trv2_processor':\n    case 'trv2':\n      return /*#__PURE__*/_jsxDEV(TRV2Processor, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 14\n      }, this);\n    case 'tinyriscv2':\n    case 'tinyriscv':\n    case 'tinyrv2':\n      return /*#__PURE__*/_jsxDEV(TinyRiscV2, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 14\n      }, this);\n    case 'c2s2':\n    default:\n      return /*#__PURE__*/_jsxDEV(C2S2, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 14\n      }, this);\n  }\n};\n_c4 = Documentation;\nexport default Documentation;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"C2S2\");\n$RefreshReg$(_c2, \"TRV2Processor\");\n$RefreshReg$(_c3, \"TinyRiscV2\");\n$RefreshReg$(_c4, \"Documentation\");","map":{"version":3,"names":["React","mock09","mock10","iter_mul","jsxDEV","_jsxDEV","C2S2","className","children","href","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","TRV2Processor","_c2","TinyRiscV2","target","rel","_c3","Documentation","projectId","hashId","window","location","hash","replace","inferred","startsWith","split","id","toLowerCase","_c4","$RefreshReg$"],"sources":["/Users/ivanmokeyev/Documents/Eng Projects/smokevan.github.io/src/components/Documentation.tsx"],"sourcesContent":["import React from 'react';\nimport '../assets/styles/Documentation.scss';\nimport mock09 from '../assets/images/mock09.png';\nimport mock10 from '../assets/images/mock10.png';\nimport iter_mul from '../assets/images/mock08.png';\n\ntype Props = {\n  projectId?: string;\n};\n\nconst C2S2 = () => (\n  <div className=\"docs-page-wrapper\">\n    <div className=\"doc-container docs\">\n      <a className=\"back-link\" href=\"#/\">← Back</a>\n      <h2>c2s2 — Component / System notes</h2>\n      <p>This project documents the component-to-system integration. Add your notes and diagrams below.</p>\n      <ul>\n        <li>Design: simple, componentized UI</li>\n        <li>Data flow: event-driven</li>\n      </ul>\n      <img src={mock09} alt=\"c2s2 mock\" className=\"diagram\" />\n    </div>\n  </div>\n);\n\nconst TRV2Processor = () => (\n  <div className=\"docs-page-wrapper\">\n    <div className=\"doc-container docs\">\n      <a className=\"back-link\" href=\"#/\">← Back</a>\n      <h2>TRV2_processor — Processing pipeline</h2>\n      <p>Overview of the TRV2_processor pipeline and transform steps.</p>\n      <ol>\n        <li>Load input</li>\n        <li>Normalize</li>\n        <li>Run processor</li>\n      </ol>\n      <img src={mock10} alt=\"TRV2 mock\" className=\"diagram\" />\n      <p>Example iteration diagram:</p>\n      <img src={iter_mul} alt=\"iteration diagram\" className=\"diagram\" />\n    </div>\n  </div>\n);\n\nconst TinyRiscV2 = () => (\n  <div className=\"doc-container docs\">\n    <a className=\"back-link\" href=\"#/\">← Back</a>\n    <h1>TinyRiscV2 Processor</h1>\n    <img src={mock09} alt=\"TinyRiscV2 hero\" className=\"doc-hero\" />\n    <section className=\"doc-content\">\n      <h2>Overview</h2>\n      <p>\n        This is a compact TinyRISCV2 compatible processor implementation, with five forwarded pipeline stages,\n        an iterative multiplication unit, a branch target buffer, and more.\n      </p>\n      <h3>Quick links</h3>\n      <ul>\n        <li><a href=\"https://github.com/smokevan\" target=\"_blank\" rel=\"noreferrer\">GitHub</a></li>\n      </ul>\n      <h2>Design Process</h2>\n      <p>\n        This processor was in part designed for ECE4750, Computer Architecture, at Cornell University. Using some\n        previously verified IP, such as muxes, registers, a regfile, and a memory interface, I designed the\n        processor from the ground up in SystemVerilog. This processor uses a common 5-stage pipeline, with instruction\n        fetch, decode, execute, memory, and writeback stages. It implements full forwarding and hazard detection to stall\n        when necessary for multiplication, processor management, and memory operations.\n      </p>\n      <h3>Iterative Multiplier</h3>\n      <img src={iter_mul} alt=\"iterative multiplier diagram\" className=\"diagram\" />\n      <p>\n        The iterative multiplier uses a common shift-and-add algorithm to perform multiplication over multiple cycles,\n        with a variable latency system to optimize speed by shifting by several indices when many zeroes are present\n        in the multiplier or multiplicand. This is handled through a standard val/rdy streaming interface, allowing for\n        careful handling of multiplication operations in the pipeline using hazard detection and stalling.\n      </p>\n    </section>\n  </div>\n);\n\nconst Documentation: React.FC<Props> = ({ projectId }) => {\n  const hashId = typeof window !== 'undefined' ? (window.location.hash || '').replace(/^#\\/?/, '') : '';\n  const inferred = hashId.startsWith('docs/') ? hashId.split('/')[1] : '';\n  const id = projectId || inferred || 'c2s2';\n  if (!id) return <div className=\"docs\">No project selected</div>;\n\n  switch (id.toLowerCase()) {\n    case 'trv2_processor':\n    case 'trv2':\n      return <TRV2Processor />;\n    case 'tinyriscv2':\n    case 'tinyriscv':\n    case 'tinyrv2':\n      return <TinyRiscV2 />;\n    case 'c2s2':\n    default:\n      return <C2S2 />;\n  }\n};\n\nexport default Documentation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}