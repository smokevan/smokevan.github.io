{"ast":null,"code":"var _jsxFileName = \"/Users/ivanmokeyev/Documents/Eng Projects/smokevan.github.io/src/components/Documentation.tsx\";\nimport React from 'react';\nimport '../assets/styles/Documentation.scss';\nimport mock09 from '../assets/images/mock09.png';\nimport mock10 from '../assets/images/mock10.png';\nimport iter_mul from '../assets/images/mock08.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst C2S2 = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"docs\",\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"c2s2 \\u2014 Component / System notes\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"This project documents the component-to-system integration. Add your notes and diagrams below.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"Design: simple, componentized UI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"Data flow: event-driven\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: mock09,\n    alt: \"c2s2 mock\",\n    className: \"diagram\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 3\n}, this);\n_c = C2S2;\nconst TRV2Processor = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"docs\",\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"TRV2_processor \\u2014 Processing pipeline\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Overview of the TRV2_processor pipeline and transform steps.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"Load input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"Normalize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"Run processor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: mock10,\n    alt: \"TRV2 mock\",\n    className: \"diagram\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Example iteration diagram:\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: iter_mul,\n    alt: \"iteration diagram\",\n    className: \"diagram\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 24,\n  columnNumber: 3\n}, this);\n_c2 = TRV2Processor;\nconst TinyRiscV2 = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"doc-container docs\",\n  children: [/*#__PURE__*/_jsxDEV(\"a\", {\n    className: \"back-link\",\n    href: \"#/\",\n    children: \"\\u2190 Back\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"TinyRiscV2 Processor\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: mock09,\n    alt: \"TinyRiscV2 hero\",\n    className: \"doc-hero\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"doc-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This is a compact TinyRISCV2 compatible processor implementation, with five forwarded pipeline stages, an iterative multiplication unit, a branch target buffer, and more.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Quick links\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://github.com/smokevan\",\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: \"GitHub\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Design Process\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This processor was in part designed for ECE4750, Computer Architecture, at Cornell University. Using some previously verified IP, such as muxes, registers, a regfile, and a memory interface, I designed the processor from the ground up in SystemVerilog. This processor uses a common 5-stage pipeline, with instruction fetch, decode, execute, memory, and writeback stages. It implements full forwarding and hazard detection to stall when necessary for multiplication, processor management, and memory operations.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Iterative Multiplier\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: iter_mul,\n      alt: \"iterative multiplier diagram\",\n      className: \"diagram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The iterative multiplier uses a common shift-and-add algorithm to perform multiplication over multiple cycles, with a variable latency system to optimize speed by shifting by several indices when many zeroes are present in the multiplier or multiplicand. This is handled through a standard val/rdy streaming interface, allowing for careful handling of multiplication operations in the pipeline using hazard detection and stalling.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 39,\n  columnNumber: 3\n}, this);\n_c3 = TinyRiscV2;\nconst Documentation = ({\n  projectId\n}) => {\n  const id = projectId || (typeof window !== 'undefined' ? window.location.pathname.split('/').pop() : 'c2s2');\n  if (!id) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"docs\",\n    children: \"No project selected\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 19\n  }, this);\n  switch (id.toLowerCase()) {\n    case 'trv2_processor':\n    case 'trv2':\n      return /*#__PURE__*/_jsxDEV(TRV2Processor, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 14\n      }, this);\n    case 'tinyriscv2':\n    case 'tinyriscv':\n    case 'tinyrv2':\n      return /*#__PURE__*/_jsxDEV(TinyRiscV2, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 14\n      }, this);\n    case 'c2s2':\n    default:\n      return /*#__PURE__*/_jsxDEV(C2S2, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 14\n      }, this);\n  }\n};\n_c4 = Documentation;\nexport default Documentation;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"C2S2\");\n$RefreshReg$(_c2, \"TRV2Processor\");\n$RefreshReg$(_c3, \"TinyRiscV2\");\n$RefreshReg$(_c4, \"Documentation\");","map":{"version":3,"names":["React","mock09","mock10","iter_mul","jsxDEV","_jsxDEV","C2S2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","TRV2Processor","_c2","TinyRiscV2","href","target","rel","_c3","Documentation","projectId","id","window","location","pathname","split","pop","toLowerCase","_c4","$RefreshReg$"],"sources":["/Users/ivanmokeyev/Documents/Eng Projects/smokevan.github.io/src/components/Documentation.tsx"],"sourcesContent":["import React from 'react';\nimport '../assets/styles/Documentation.scss';\nimport mock09 from '../assets/images/mock09.png';\nimport mock10 from '../assets/images/mock10.png';\nimport iter_mul from '../assets/images/mock08.png';\n\ntype Props = {\n  projectId?: string;\n};\n\nconst C2S2 = () => (\n  <div className=\"docs\">\n    <h2>c2s2 — Component / System notes</h2>\n    <p>This project documents the component-to-system integration. Add your notes and diagrams below.</p>\n    <ul>\n      <li>Design: simple, componentized UI</li>\n      <li>Data flow: event-driven</li>\n    </ul>\n    <img src={mock09} alt=\"c2s2 mock\" className=\"diagram\" />\n  </div>\n);\n\nconst TRV2Processor = () => (\n  <div className=\"docs\">\n    <h2>TRV2_processor — Processing pipeline</h2>\n    <p>Overview of the TRV2_processor pipeline and transform steps.</p>\n    <ol>\n      <li>Load input</li>\n      <li>Normalize</li>\n      <li>Run processor</li>\n    </ol>\n    <img src={mock10} alt=\"TRV2 mock\" className=\"diagram\" />\n    <p>Example iteration diagram:</p>\n    <img src={iter_mul} alt=\"iteration diagram\" className=\"diagram\" />\n  </div>\n);\n\nconst TinyRiscV2 = () => (\n  <div className=\"doc-container docs\">\n    <a className=\"back-link\" href=\"#/\">← Back</a>\n    <h1>TinyRiscV2 Processor</h1>\n    <img src={mock09} alt=\"TinyRiscV2 hero\" className=\"doc-hero\" />\n    <section className=\"doc-content\">\n      <h2>Overview</h2>\n      <p>\n        This is a compact TinyRISCV2 compatible processor implementation, with five forwarded pipeline stages,\n        an iterative multiplication unit, a branch target buffer, and more.\n      </p>\n      <h3>Quick links</h3>\n      <ul>\n        <li><a href=\"https://github.com/smokevan\" target=\"_blank\" rel=\"noreferrer\">GitHub</a></li>\n      </ul>\n      <h2>Design Process</h2>\n      <p>\n        This processor was in part designed for ECE4750, Computer Architecture, at Cornell University. Using some\n        previously verified IP, such as muxes, registers, a regfile, and a memory interface, I designed the\n        processor from the ground up in SystemVerilog. This processor uses a common 5-stage pipeline, with instruction\n        fetch, decode, execute, memory, and writeback stages. It implements full forwarding and hazard detection to stall\n        when necessary for multiplication, processor management, and memory operations.\n      </p>\n      <h3>Iterative Multiplier</h3>\n      <img src={iter_mul} alt=\"iterative multiplier diagram\" className=\"diagram\" />\n      <p>\n        The iterative multiplier uses a common shift-and-add algorithm to perform multiplication over multiple cycles,\n        with a variable latency system to optimize speed by shifting by several indices when many zeroes are present\n        in the multiplier or multiplicand. This is handled through a standard val/rdy streaming interface, allowing for\n        careful handling of multiplication operations in the pipeline using hazard detection and stalling.\n      </p>\n    </section>\n  </div>\n);\n\nconst Documentation: React.FC<Props> = ({ projectId }) => {\n  const id = projectId || (typeof window !== 'undefined' ? window.location.pathname.split('/').pop() : 'c2s2');\n  if (!id) return <div className=\"docs\">No project selected</div>;\n\n  switch (id.toLowerCase()) {\n    case 'trv2_processor':\n    case 'trv2':\n      return <TRV2Processor />;\n    case 'tinyriscv2':\n    case 'tinyriscv':\n    case 'tinyrv2':\n      return <TinyRiscV2 />;\n    case 'c2s2':\n    default:\n      return <C2S2 />;\n  }\n};\n\nexport default Documentation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}