{"ast":null,"code":"import React from'react';import'../assets/styles/Documentation.scss';import mock09 from'../assets/images/mock09.png';import mock10 from'../assets/images/mock10.png';import iter_mul from'../assets/images/iter_mul.png';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const C2S2=()=>/*#__PURE__*/_jsxs(\"div\",{className:\"docs\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"c2s2 \\u2014 Component / System notes\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This project documents the component-to-system integration. Add your notes and diagrams below.\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Design: simple, componentized UI\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Data flow: event-driven\"})]}),/*#__PURE__*/_jsx(\"img\",{src:mock09,alt:\"c2s2 mock\",className:\"diagram\"})]});const TRV2Processor=()=>/*#__PURE__*/_jsxs(\"div\",{className:\"docs\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"TRV2_processor \\u2014 Processing pipeline\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Overview of the TRV2_processor pipeline and transform steps.\"}),/*#__PURE__*/_jsxs(\"ol\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Load input\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Normalize\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Run processor\"})]}),/*#__PURE__*/_jsx(\"img\",{src:mock10,alt:\"TRV2 mock\",className:\"diagram\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Example iteration diagram:\"}),/*#__PURE__*/_jsx(\"img\",{src:iter_mul,alt:\"iteration diagram\",className:\"diagram\"})]});const TinyRiscV2=()=>/*#__PURE__*/_jsxs(\"div\",{className:\"doc-container docs\",children:[/*#__PURE__*/_jsx(\"a\",{className:\"back-link\",href:\"#/\",children:\"\\u2190 Back\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"TinyRiscV2 Processor\"}),/*#__PURE__*/_jsx(\"img\",{src:mock09,alt:\"TinyRiscV2 hero\",className:\"doc-hero\"}),/*#__PURE__*/_jsxs(\"section\",{className:\"doc-content\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Overview\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This is a compact TinyRISCV2 compatible processor implementation, with five forwarded pipeline stages, an iterative multiplication unit, a branch target buffer, and more.\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Quick links\"}),/*#__PURE__*/_jsx(\"ul\",{children:/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/smokevan\",target:\"_blank\",rel:\"noreferrer\",children:\"GitHub\"})})}),/*#__PURE__*/_jsx(\"h2\",{children:\"Design Process\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This processor was in part designed for ECE4750, Computer Architecture, at Cornell University. Using some previously verified IP, such as muxes, registers, a regfile, and a memory interface, I designed the processor from the ground up in SystemVerilog. This processor uses a common 5-stage pipeline, with instruction fetch, decode, execute, memory, and writeback stages. It implements full forwarding and hazard detection to stall when necessary for multiplication, processor management, and memory operations.\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Iterative Multiplier\"}),/*#__PURE__*/_jsx(\"img\",{src:iter_mul,alt:\"iterative multiplier diagram\",className:\"diagram\"}),/*#__PURE__*/_jsx(\"p\",{children:\"The iterative multiplier uses a common shift-and-add algorithm to perform multiplication over multiple cycles, with a variable latency system to optimize speed by shifting by several indices when many zeroes are present in the multiplier or multiplicand. This is handled through a standard val/rdy streaming interface, allowing for careful handling of multiplication operations in the pipeline using hazard detection and stalling.\"})]})]});const Documentation=_ref=>{let{projectId}=_ref;const id=projectId||(typeof window!=='undefined'?window.location.pathname.split('/').pop():'c2s2');if(!id)return/*#__PURE__*/_jsx(\"div\",{className:\"docs\",children:\"No project selected\"});switch(id.toLowerCase()){case'trv2_processor':case'trv2':return/*#__PURE__*/_jsx(TRV2Processor,{});case'tinyriscv2':case'tinyriscv':case'tinyrv2':return/*#__PURE__*/_jsx(TinyRiscV2,{});case'c2s2':default:return/*#__PURE__*/_jsx(C2S2,{});}};export default Documentation;","map":{"version":3,"names":["React","mock09","mock10","iter_mul","jsx","_jsx","jsxs","_jsxs","C2S2","className","children","src","alt","TRV2Processor","TinyRiscV2","href","target","rel","Documentation","_ref","projectId","id","window","location","pathname","split","pop","toLowerCase"],"sources":["/Users/ivanmokeyev/Documents/Eng Projects/smokevan.github.io/src/components/Documentation.tsx"],"sourcesContent":["import React from 'react';\nimport '../assets/styles/Documentation.scss';\nimport mock09 from '../assets/images/mock09.png';\nimport mock10 from '../assets/images/mock10.png';\nimport iter_mul from '../assets/images/iter_mul.png';\n\ntype Props = {\n  projectId?: string;\n};\n\nconst C2S2 = () => (\n  <div className=\"docs\">\n    <h2>c2s2 — Component / System notes</h2>\n    <p>This project documents the component-to-system integration. Add your notes and diagrams below.</p>\n    <ul>\n      <li>Design: simple, componentized UI</li>\n      <li>Data flow: event-driven</li>\n    </ul>\n    <img src={mock09} alt=\"c2s2 mock\" className=\"diagram\" />\n  </div>\n);\n\nconst TRV2Processor = () => (\n  <div className=\"docs\">\n    <h2>TRV2_processor — Processing pipeline</h2>\n    <p>Overview of the TRV2_processor pipeline and transform steps.</p>\n    <ol>\n      <li>Load input</li>\n      <li>Normalize</li>\n      <li>Run processor</li>\n    </ol>\n    <img src={mock10} alt=\"TRV2 mock\" className=\"diagram\" />\n    <p>Example iteration diagram:</p>\n    <img src={iter_mul} alt=\"iteration diagram\" className=\"diagram\" />\n  </div>\n);\n\nconst TinyRiscV2 = () => (\n  <div className=\"doc-container docs\">\n    <a className=\"back-link\" href=\"#/\">← Back</a>\n    <h1>TinyRiscV2 Processor</h1>\n    <img src={mock09} alt=\"TinyRiscV2 hero\" className=\"doc-hero\" />\n    <section className=\"doc-content\">\n      <h2>Overview</h2>\n      <p>\n        This is a compact TinyRISCV2 compatible processor implementation, with five forwarded pipeline stages,\n        an iterative multiplication unit, a branch target buffer, and more.\n      </p>\n      <h3>Quick links</h3>\n      <ul>\n        <li><a href=\"https://github.com/smokevan\" target=\"_blank\" rel=\"noreferrer\">GitHub</a></li>\n      </ul>\n      <h2>Design Process</h2>\n      <p>\n        This processor was in part designed for ECE4750, Computer Architecture, at Cornell University. Using some\n        previously verified IP, such as muxes, registers, a regfile, and a memory interface, I designed the\n        processor from the ground up in SystemVerilog. This processor uses a common 5-stage pipeline, with instruction\n        fetch, decode, execute, memory, and writeback stages. It implements full forwarding and hazard detection to stall\n        when necessary for multiplication, processor management, and memory operations.\n      </p>\n      <h3>Iterative Multiplier</h3>\n      <img src={iter_mul} alt=\"iterative multiplier diagram\" className=\"diagram\" />\n      <p>\n        The iterative multiplier uses a common shift-and-add algorithm to perform multiplication over multiple cycles,\n        with a variable latency system to optimize speed by shifting by several indices when many zeroes are present\n        in the multiplier or multiplicand. This is handled through a standard val/rdy streaming interface, allowing for\n        careful handling of multiplication operations in the pipeline using hazard detection and stalling.\n      </p>\n    </section>\n  </div>\n);\n\nconst Documentation: React.FC<Props> = ({ projectId }) => {\n  const id = projectId || (typeof window !== 'undefined' ? window.location.pathname.split('/').pop() : 'c2s2');\n  if (!id) return <div className=\"docs\">No project selected</div>;\n\n  switch (id.toLowerCase()) {\n    case 'trv2_processor':\n    case 'trv2':\n      return <TRV2Processor />;\n    case 'tinyriscv2':\n    case 'tinyriscv':\n    case 'tinyrv2':\n      return <TinyRiscV2 />;\n    case 'c2s2':\n    default:\n      return <C2S2 />;\n  }\n};\n\nexport default Documentation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}